{% extends 'base.html.twig' %}

{% block head_scripts %}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.3/dist/leaflet.css"
          integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ=="
          crossorigin=""/>
    <!-- Make sure you put this AFTER Leaflet's CSS -->
    <script src="https://unpkg.com/leaflet@1.3.3/dist/leaflet.js"
            integrity="sha512-tAGcCfR4Sc5ZP5ZoVz0quoZDYX5aCtEm/eu1KhSLj2c9eFrylXZknQYmxUssFaVJKvvc0dJQixhGjG2yXWiV9Q=="
            crossorigin=""></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.48.0/mapbox-gl.css' rel='stylesheet' />
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.48.0/mapbox-gl.js'></script>

{% endblock %}

{% block body %}


{#https://stackoverflow.com/questions/24383917/symfony2-get-user-role-in-twig#}
    {% if is_granted ('ROLE_VALIDATOR') %}
        <h3>Edit coordinates of occurrence {{ occurrence.id }} for <i>{{ singleSpecies.speciesNameWorms }}</i> </h3>
        <p>Created by {{ occurrence.inputter.firstName }} {{ occurrence.inputter.lastName }} ({{ occurrence.inputter.username }}),
            on {{ occurrence.occurrenceCreatedAt | date ('d/m/Y')}}
            at {{ occurrence.occurrenceCreatedAt | date ('H:i')}}</p>

        <p>
        <a href="{{ path('non_valid_list_for_phylum_with_details_one_species', {'idSpecies': singleSpecies.id, 'idPhylum': singleSpecies.phylum.id, 'mode':'show_list'}) }}" class="btn btn-primary">Back to list</a>
        <a href="{{ path('validate_occurrence', {'idOccurrence': occurrence.id}) }}" class="btn btn-primary">Validate</a>
            <a href="{{ path('validation_occurrence_edit_gps', {'idOccurrence': occurrence.id}) }}" class="btn btn-primary">Quick GeoEdit</a>
            <a href="{{ path('warning_remove_occurrence', {'idOccurrence': occurrence.id}) }}" class="btn btn-primary">Remove</a>
        </p>



        {% form_theme formEditOccurrence 'bootstrap_4_layout.html.twig' %}

        {{ form_start(formEditOccurrence) }}

        <p>Confirm the modifications&nbsp;<button type="submit" class="btn btn-success">Submit</button></p>

        <div id="map_for_occurrence" style="height: 400px; width: 800px;"></div>

        <div style="border-style: solid">
            <p><i>Geolocator helper:</i> please insert approximate coordinates</p>
            <p>Latitude: <input type="text" style="width:60px;" name="lat" id="lat"/>
                &nbsp;Longitude: <input type="text" style="width:60px;" name="lng" id="lng"/>
                <input type="button" onclick="zoomTo()" value="Locate"/></p>
            <p>Drag the blue pointer to the accurate location (map or satellite option) and copy the values below in the form</p>
            <span>Latitude:</span>
            <span id="getLatitude">0</span>
            <br>
            <span>Longitude: </span><span id="getLongitude">0</span>

        </div>



        {% set latPlaceholder = "<div id=getLatitude></div>" %}
        {{ form_row(formEditOccurrence.decimalLatitude,
            {'label':"Latitude (in decimals)", 'attr':{'id': 'getlatitude'}}) }}

        {{ form_row(formEditOccurrence.decimalLongitude,
            {'label':"Longitude (in decimals)", 'attr':{'placeholder': "Required (e.g. 12.24345), from -180 to 180"}}) }}
        {{ form_row(formEditOccurrence.eventDate) }}

        {{ form_row(formEditOccurrence.locality,
            {'attr':{'placeholder': "Name of the location (optional)"}}) }}
        {{ form_row(formEditOccurrence.vernacularName,
            {'attr':{'placeholder': "Given name at collection(optional)"}}) }}
        {{ form_row(formEditOccurrence.scientificNameAtCollection,
            {'label':"Original scientific name given during the collection", 'attr':{'placeholder': "(optional)"}}) }}
        {{ form_row(formEditOccurrence.locationId,
            {'label':"Marine region identifier ( or any location ID)",'attr':{'placeholder': "(optional)"}}) }}
        {{ form_row(formEditOccurrence.occurrenceRemarks,
            {'label':"Remarks (e.g., stranded specimen,...",'attr':{'placeholder': "(optional)"}}) }}
        {{ form_row(formEditOccurrence.associatedMediaUrl,
            {'label':"URL for any media to the particular observation", 'attr':{'placeholder':"(optional)"}}) }}
        <div style="color:red; font-size: 150%">
            {{ form_row(formEditOccurrence.species, {'label':"Species ( ! attribution of the occurrence record to another species)"}) }}
        </div>





        {{ form_end(formEditOccurrence) }}


    {#{% else %}#}

        {#<h1>Occurrence {{ occurrence.id }} for <i>{{ singleSpecies.id }} </i></h1>#}
        {#<p>Created by {{ occurrence.inputter.firstName }} {{ occurrence.inputter.lastName }} ({{ occurrence.inputter.username }}),#}
            {#on {{ occurrence.occurrenceCreatedAt | date ('d/m/Y')}}#}
            {#at {{ occurrence.occurrenceCreatedAt | date ('H:i')}}</p>#}
        {#<br>#}
        {#<h4>As you are not the creator of this record, please notice that you are not authorized to edit it.</h4>#}
        {#<h4>Please contact the administrator to become a validator</h4>#}

    {% endif %}
{% endblock %}

{% block scripts_bottom %}

    <script>
        var intervalLayer0 = L.layerGroup();
        var intervalLayer1 = L.layerGroup();
        var intervalLayer2 = L.layerGroup();
        var intervalLayer3 = L.layerGroup();
        var intervalLayer4 = L.layerGroup();
        var intervalLayer5 = L.layerGroup();
        var intervalLayer6 = L.layerGroup();
        var intervalLayer7 = L.layerGroup();

        var LeafIcon = L.Icon.extend({
            options: {
                iconSize:     [10, 10],
                iconAnchor:   [5, 8],
                popupAnchor:  [0, -5]
            }
        });
        //See http://colorbrewer2.org/#type=diverging&scheme=RdYlGn&n=8
        var icon0 = new LeafIcon({iconUrl: '{{ asset('images/cb0.png') }}'}),
            icon1 = new LeafIcon({iconUrl: '{{ asset('images/cb1.png') }}'}),
            icon2 = new LeafIcon({iconUrl: '{{ asset('images/cb2.png') }}'}),
            icon3 = new LeafIcon({iconUrl: '{{ asset('images/cb3.png') }}'}),
            icon4 = new LeafIcon({iconUrl: '{{ asset('images/cb4.png') }}'}),
            icon5 = new LeafIcon({iconUrl: '{{ asset('images/cb5.png') }}'}),
            icon6 = new LeafIcon({iconUrl: '{{ asset('images/cb6.png') }}'}),
            icon7 = new LeafIcon({iconUrl: '{{ asset('images/cb7.png') }}'});

        var markers = [];
        {% for intervalWithFreqAndOccurrences in intervalsWithFreqAndOccurrences %}
        {% set nameForIcon = 'icon' ~ loop.index0 %}
        {% set nameForLayerGroup = 'intervalLayer' ~ loop.index0 %}
        {% for occurrence in intervalWithFreqAndOccurrences.2 %}
        {% if occurrence.isValidated %}
        {#{% if occurrence.species == singleSpecies %}#}
        var marker = L.marker([{{ occurrence.decimalLatitude }}, {{ occurrence.decimalLongitude }}], {title: "id{{ occurrence.id }}", icon:{{ nameForIcon}} })
            .bindPopup("<p>{{ occurrence.locality }}</br>{{ occurrence.eventDate | date ('Y')}}</br># {{ occurrence.id }}</p>")
            .addTo({{ nameForLayerGroup }});
        markers.push (marker);
        {#{% endif %}#}

        {% endif %}
        {% endfor %}
        {% endfor %}





        var mapUrl = 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}';
        var mapAttributes = 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>';

        var satellite = L.tileLayer(mapUrl, {id: 'mapbox.satellite',
            accessToken: 'pk.eyJ1IjoiZm1pbmV1ciIsImEiOiJjamwzdGk3ZzYwaGY4M3dtcTFvcmpzNWt0In0.eDKRO3APxmefQb1H-gaT2A',
            attribution:mapAttributes
        });
        var streets = L.tileLayer(mapUrl, {id: 'mapbox.streets',
            accessToken: 'pk.eyJ1IjoiZm1pbmV1ciIsImEiOiJjamwzdGk3ZzYwaGY4M3dtcTFvcmpzNWt0In0.eDKRO3APxmefQb1H-gaT2A',
            attribution:mapAttributes
        });

        var mapForOccurrence = L.map('map_for_occurrence',{
            zoom:12,
            center: [50,0],
            layers: [satellite, streets, intervalLayer0, intervalLayer1, intervalLayer2, intervalLayer3, intervalLayer4,
                intervalLayer5, intervalLayer6, intervalLayer7 ]
        });
        var baseLayers = {
            "Satellite": satellite,
            "Map": streets,

        };

        var overlays = {
            {% for intervalWithFreqAndOccurrences in intervalsWithFreqAndOccurrences %}
            {% set nameLayer = 'intervalLayer' ~ loop.index0 %}
            {% set indexOfLoop = '' ~ loop.index0 %}
            "<img style='vertical-align:middle; height: 10px' src='{{ asset("images/cb#{indexOfLoop}.png") }}'><div style='vertical-align:middle; display:inline;'>&nbsp; {{ intervalWithFreqAndOccurrences.0 }}</div>": {{ nameLayer }},
            {% endfor %}

        };


        L.control.layers(baseLayers, overlays).addTo(mapForOccurrence);



            var lat = {{ occurrence.decimalLatitude }};
            var lng = {{ occurrence.decimalLongitude }};
            document.getElementById('getLatitude').innerHTML = lat;
            document.getElementById('getLongitude').innerHTML = lng;



            mapForOccurrence.setView(new L.LatLng(lat, lng), 12);
            var myMarker = L.marker([lat, lng], {draggable: true}).addTo(mapForOccurrence)
                .on('dragend', function() {
                    var coord = String(myMarker.getLatLng())                  //getLatLng produces a string e.g. 'LatLng(50.124, -0,32443)'
                        .split(/[(),]+/);                                           //var coord is now a vector (split is either '(', ')', or ','
                    console.log(coord);
                    var lat = coord[1].trim();
                    console.log(lat);
                    var lng = coord[2].trim();
                    console.log(lng);
                    function getSingleCoordinate(latOrLng){
                        return latOrLng;
                    }
                    myMarker.bindPopup("LAT " + lat + " \nLNG " + lng );
                    document.getElementById('getLatitude').innerHTML = getSingleCoordinate(lat);
                    document.getElementById('getLongitude').innerHTML = getSingleCoordinate(lng);


                });




    </script>


{% endblock %}